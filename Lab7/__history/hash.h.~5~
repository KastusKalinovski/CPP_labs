//---------------------------------------------------------------------------

#ifndef hashH
#define hashH
//---------------------------------------------------------------------------
template<typename T>
class Stack
{

public:
	Stack();

   ~Stack();

	void deleteFirst();

	int GetSize() { return Size; }

	void addInFirst(T data);

	void clear();

	int hash(int k);

	T & peek()
	{
		Node<T> *current = this->head;
		return current->data;
	}

private:

	template<typename T>
	class Node
	{
	public:
		Node * pNext;
		T data;
		Node(T data = T(), Node *pNext = NULL)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};
	int Size;
	Node<T> *head;
};

template<typename T>
Stack<T>::Stack()
{
	Size = 0;
	head = NULL;
}

template<typename T>
Stack<T>::~Stack()
{
	clear();
}

template<typename T>
void Stack<T>::deleteFirst()
{
	Node<T> *temp = head;
	head = head->pNext;
	delete temp;
	Size--;
}

template<typename T>
void Stack<T>::addInFirst(T data)
{
	head = new Node<T>(data, head);
	Size++;
}

template<typename T>
void Stack<T>::clear()
{
	while (Size)
	{
		deleteFirst();
	}
}

template<typename T>
int Stack<T>::hash(int k)
{
return k%10;
}
#endif
