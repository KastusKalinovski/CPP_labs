// ---------------------------------------------------------------------------

#pragma hdrstop

#include "hash.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)

List::List() {
	size = 0;
	head = NULL;
}

List::~List() {
	clear();
}

void List::pop_index(int index) {

	if (index == 0)
		this->pop_front();
	else {
		Node *previous = this->head;

		for (int i = 0; i < index - 1; i++) {
			previous = previous->pNext;
		}

		Node *toDelete = previous->pNext;
		previous->pNext = toDelete->pNext;
		delete toDelete;
		size--;
	}
}

int &List:: operator[](const int index) {
	int counter = 0;
	Node *current = this->head;

	while (current != NULL) {
		if (counter == index)
			return current->data;
		current = current->pNext;
		counter++;
	}
}

void List::push_front(int *data){
	if(head==NULL)
		head = new Node(*data);
	else{
		Node *curr = new Node(data,head);
		head = curr;
    }
}
