// ---------------------------------------------------------------------------

#ifndef Unit1H
#define Unit1H
// ---------------------------------------------------------------------------
#include <System.Classes.hpp>
#include <Vcl.Controls.hpp>
#include <Vcl.StdCtrls.hpp>
#include <Vcl.Forms.hpp>
#include <Vcl.ExtCtrls.hpp>
#include <math.h>
#include "circle.h"
#include "square.h"

// ---------------------------------------------------------------------------
class TForm1 : public TForm {
__published: // IDE-managed Components
	TImage *Image1;
	TEdit *Edit2;
	TEdit *Edit4;
	TLabel *Label1;
	TLabel *Label2;
	TLabel *Label3;
	TLabel *Label4;
	TLabel *Label5;
	TLabel *Label6;
	TEdit *Edit5;
	TEdit *Edit6;
	TTimer *Timer1;
	TLabel *Label7;
	TLabel *Label8;
	TLabel *Label9;
	TLabel *Label10;
	TLabel *Label11;
	TLabel *Label12;
	TLabel *Label13;
	TEdit *Edit1;
	TEdit *Edit3;
	TEdit *Edit7;
	TLabel *Label14;
	TLabel *Label15;
	TLabel *Label16;
	TImage *Image2;
	TTimer *Timer2;
	TLabel *Label17;
	TLabel *Label18;
	TLabel *Label19;
	TScrollBar *ScrollBar5;
	TScrollBar *ScrollBar1;
	void __fastcall Button2Click(TObject *Sender);
	void __fastcall Timer1Timer(TObject *Sender);
	void __fastcall Timer2Timer(TObject *Sender);
	void __fastcall ScrollBar1Change(TObject *Sender);

private: // User declarations
public: // User declarations
	__fastcall TForm1(TComponent* Owner);
};

// class shape {
// protected:
// int xCo, yCo;
// float p, s;
//
// public:
//
// float showP(p) {
// return p;
// }
//
// float showS(s) {
// return s;
// }
//
// shape() : xCo(0), yCo(0) { // default
// }
//
// shape(int x, int y) : xCo(x), yCo(y) { // constructor
// }
//
// };
//
// class circle : public shape {
// private:
// int radius;
//
// int moveX, moveY;
//
// public:
//
// circle() : shape() { // default
// }
//
// circle(int x, int y, int r) : shape(x, y), radius(r) {
// }
//
// void draw(TImage *Image1, int moveX, int moveY) {
// Image1->Canvas->Ellipse(xCo - radius + moveX, yCo - radius + moveY,
// xCo + radius + moveX, yCo + radius + moveY);
// }
//
// void clr(TImage *Image1, int moveX, int moveY) {
// Image1->Canvas->Brush->Color = clWhite;
// Image1->Canvas->Ellipse(xCo - radius + moveX, yCo - radius + moveY,
// xCo + radius + moveX, yCo + radius + moveY);
// }
//
// float showP() {
// return 2 * M_PI * radius;
// }
//
// float showS() {
// return M_PI*radius*radius;
// }
//
// };

// ---------------------------------------------------------------------------
extern PACKAGE TForm1 *Form1;
// ---------------------------------------------------------------------------
#endif
