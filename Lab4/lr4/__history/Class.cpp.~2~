//---------------------------------------------------------------------------


#pragma hdrstop

#include "Class.h"
#include <cwchar>
//---------------------------------------------------------------------------

#pragma package(smart_init)


Calculation :: Calculation (){}

Calculation :: Calculation (wchar_t *str){
	number_in_stack = 0;
	int i = 0;
	while(i <= 100){
		stack[i++] = ' ';
	}
	//std :: wcslen(str);
	size = wcslen(str);
	infixStr = new wchar_t[size];
	postfixStr = new wchar_t[size];
	for (int i = 0; i <= size; i++) {
		infixStr[i] = str[i];
	}
}

void Calculation :: push(wchar_t simb) {
	stack[number_in_stack++] = simb;
}

wchar_t Calculation :: pop(){
	return stack[--number_in_stack];
}

wchar_t Calculation :: last_in_stack(){
	return stack[number_in_stack - 1];
}

void Calculation :: Transformation() {
	int in_number = 0, out_number = 0;

	do {
		wchar_t c = infixStr[in_number];
		switch (c) {
			case '+': {
				if (last_in_stack() == '+' || last_in_stack() == '-' ) {
					postfixStr[out_number++] = pop();
				}
				push(c);
				in_number++;
			} break;
			case '-': {
				if (last_in_stack() == '+' || last_in_stack() == '-') {
					postfixStr[out_number++] = pop();
				}
				push(c);
				in_number++;
			} break;
			case '*': {
				if (last_in_stack() == '/' || last_in_stack() == '*' || last_in_stack() == '^') {
					postfixStr[out_number++] = pop();
				}
				push(c);
				in_number++;
			} break;
			case '/': {
				if (last_in_stack() == '/' || last_in_stack() == '*' || last_in_stack() == '^') {
					postfixStr[out_number++] = pop();
				}
				push(c);
				in_number++;
			} break;
			case '(': {
				push(c);
				in_number++;
			} break;
			case ')': {
				while(last_in_stack() != '(') {
					postfixStr[out_number++] = pop();
				}
				char sinb = pop();
				in_number++;
			} break;
			case '^': {
            	push(c);
				in_number++;
            } break;
		default: {
				postfixStr[out_number++] = c;
				in_number++;
			} break;
		}
	} while(infixStr[in_number] != '\0');

	while(number_in_stack != 0) {
		postfixStr[out_number++] = pop();
	}
	postfixStr[out_number] = '\0';
}

void Calculation :: calculate(wchar_t *str) {
	float stack[100];
	int top = -1;
	wchar_t temp[20];
	int k, l, i;

	for (k = 0, top = -1; k < wcslen(str); k++) {

		if (iswdigit(str[k]) != 0) {
			l = k;
			while (iswdigit(str[l+1]) != 0 || str[l+1] == '.') {
				l++;
			}

			for (i = 0; i < l - k + 1; i++) {
				temp[i] = str[k + i];
			}
			temp[i] = '\0';
			stack[++top] = _wtof(temp);
			k = l;
		}

		else {
			if (str[k] == '+' || str[k] == '-' || str[k] == '*' || str[k] == '/' || str[k] == '^') {
				switch (str[k]) {
					case '+': {
						stack[top - 1] += stack[top];
						top--;
					} break;
					case '-': {
						stack[top - 1] -= stack[top];
						top--;
					} break;
					case '*': {
						stack[top - 1] *= stack[top];
						top--;
					} break;
					case '/': {
						if (stack[top] != 0) {
							stack[top - 1] /= stack[top];
							top--;
                        }
					} break;
					case '^': {
						stack[top - 1] = pow(stack[top - 1], stack[top]);
						top--;
					} break;
				}
			}
		}
	}
	result = stack[0];
}
